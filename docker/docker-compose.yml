services:
  server:
    build:
      context: ../src/backend
      dockerfile: ../../docker/backend/Dockerfile
    container_name: server
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-filmodb}
      POSTGRES_USER: ${POSTGRES_USER:-filmo_user}
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-filmo_password}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      REDIS_URL: redis://redis:6379
      OMDB_API_KEY: ${OMDB_API_KEY:-ab21592a}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - movie-network

  postgres:
    build: ./postgres
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-filmodb}
      POSTGRES_USER: ${POSTGRES_USER:-filmo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-filmo_password}
    networks:
      - movie-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-filmo_user} -d ${POSTGRES_DB:-filmodb}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: redis
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redis-data:/data

  caddy:
    image: caddy:alpine
    container_name: caddy
    ports:
      - "80:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - server
    restart: unless-stopped
    networks:
      - movie-network

  client:
    build:
      context: ../src/frontend
      dockerfile: ../../docker/frontend/Dockerfile
    container_name: client
    restart: unless-stopped
    depends_on:
      - server
    networks:
      - movie-network

networks:
  movie-network:

volumes:
  postgres-data:
  redis-data:
