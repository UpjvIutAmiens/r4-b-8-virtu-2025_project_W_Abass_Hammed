services:
  server:
    build:
      context: ../src/backend
      dockerfile: ../../docker/backend/Dockerfile
    container_name: server
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    build: ./postgres
    container_name: postgres
    environment:
      POSTGRES_DB: filmodb
      POSTGRES_USER: filmo_user
      POSTGRES_PASSWORD: filmo_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U filmo_user -d filmodb"]
      interval: 5s
      timeout: 5s
      retries: 10

  caddy:
    image: caddy:alpine
    container_name: caddy
    ports:
      - "80:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - server
    restart: unless-stopped
    networks:
      - movie-network

networks:
  movie-network:

volumes:
  postgres:
